/*
一、灵神回溯三问：
1. 当前操作是什么？（例如枚举path【i】要填入的字母）
2. 子问题是什么？（构建答案>=i的部分）
3. 下一个子问题是什么？（构建答案>=i+1的部分）

二、我的总结
1. 

*/

// 第一种：子集型
// 子集型回溯比排列组合要难，因为答案们长度不定
// subset 78 90 + phone number digit(17)
// 17. 电话号码
const map = ["", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"];
var letterCombinations = function (digits) {
  const n = digits.length;
  if (n === 0) return [];
  const ans = [];
  const path = Array(n).fill("");

  const dfs = (i) => {
    if (i === n) {
      ans.push(path.join("")); //为什么要join/slice/[...path]？因为const array immutable。要是次次都push path，最后所有答案全一样。
      return;
    }
    // get choices: letters from mapping for cur i
    const letters = map[parseInt(digits[i])];
    for (const c of letters) {
      // overwrite path[i] with char
      path[i] = c;
      dfs(i + 1);
      // 为什么不需要恢复现场？因为path定长！！！！直接覆盖就好了
    }
  };
  dfs(0);
  return ans;
};

// 78 subsetI
// 方法一：输入视角（选或不选）
var subsets = function (nums) {
  const n = nums.length;
  const ans = [];
  const path = [];
  function dfs(i) {
    if (i === n) {
      // 子集构造完毕
      ans.push(path.slice()); // 复制 path
      return;
    }
    // 不选 nums[i]
    dfs(i + 1);
    // 选 nums[i]
    path.push(nums[i]);
    dfs(i + 1);
    path.pop(); // 恢复现场
  }
  dfs(0);
  return ans;
};

// 方法二：答案视角（枚举选哪个）
var subsets = function (nums) {
  const ans = [];
  const path = [];
  const dfs = (i) => {
    //每次必须选择一个数
    // preorder traversal, push path into ans，找到的每一个都是答案
    ans.push([...path]);
    for (let j = i; j < nums.length; j++) {
      path.push(nums[j]);
      dfs(j + 1);
      path.pop();
    }
  };
  dfs(0);
  return ans;
};

// 90 subsetII
//只写方法二答案视角代码了，方法一不好理解。
var subsetsWithDup = function (nums) {
  nums.sort((a, b) => a - b);
  const n = nums.length;
  const ans = [];
  const path = [];

  function dfs(i) {
    ans.push([...path]);

    for (let j = i; j < n; j++) {
      // 如果 j>i，说明 nums[j-1] 没有选
      // 所有等于 nums[j-1] 的数都不选
      if (j > i && nums[j] === nums[j - 1]) {
        continue;
      }
      path.push(nums[j]);
      dfs(j + 1);
      path.pop(); // 恢复现场
    }
  }

  dfs(0);
  return ans;
};

// 第二种：排列型
// permutaion 46 47 + N queen 51 52
// 46. permutaion no duplicate
var permute = function (nums) {
  const ans = [];
  const n = nums.length;
  const path = new Array(n);
  //用来标记是否已经被path选择过了
  const onPath = Array(n).fill(false);

  const dfs = (i) => {
    if (i === n) {
      ans.push([...path]);
      return;
    }
    // permutation的for loop是从j=0开始的，所以需要onPath去排除掉已选元素
    for (let j = 0; j < n; j++) {
      if (!onPath[j]) {
        path[i] = nums[j];
        onPath[j] = true;
        dfs(i + 1);
        // 恢复现场，比如【1，2，3】里面1开头的都选过了，要开始2开头了，那就要把1标成false。否则再也用不了1了。
        onPath[j] = false;
      }
    }
  };
  dfs(0);
  return ans;
};

// 47 Permutation with duplicates
var permuteUnique = function (nums) {
  // sort专治duplicates，因为好跳过
  nums.sort((a, b) => a - b);

  const ans = [];
  const n = nums.length;
  const path = Array(n);
  const onPath = Array(n).fill(false);

  const dfs = (i) => {
    if (i === n) {
      ans.push([...path]);
      return;
    }
    for (let j = 0; j < n; j++) {
      if (onPath[j] || (j > 0 && nums[j] === nums[j - 1] && !onPath[j - 1]))
        continue; // 只有这里有区别，判断一下是否和前面一样，一样就跳过

      path[i] = nums[j];
      onPath[j] = true;
      dfs(i + 1);
      onPath[j] = false;
    }
  };
  dfs(0);
  return ans;
};
// 51.Nqueens
var solveNQueens = function (n) {
  // 思路:
  // 1. each queen must be in diff col and diff row: if we use a col arr to track position, its like permutation
  // 2. queens can't be on diagonal: diff r+c（右上对角线） and diff r-c（左上对角线）
  const ans = [];
  // 比如4*4的格子，queen是【1，3，0，2】表示queen在(r，queen[r])的位置上
  const queens = Array(n).fill(0);
  // onPath数组记录每个列是不是已经被使用过
  const onPath = Array(n).fill(false);
  // 2n-1意思是把grid抻成一条之后的格子数量。
  const diag1 = Array(2 * n - 1).fill(false);
  const diag2 = Array(2 * n - 1).fill(false);

  const dfs = (r) => {
    // r表示放到第r个queen了
    if (r === n) {
      ans.push(queens.map((c) => ".".repeat(c) + "Q" + ".".repeat(n - 1 - c)));
      return;
    }
    // put queen at (r,c)
    for (let c = 0; c < n; c++) {
      // d1表示右上对角线，d2表示左上对角线
      // d2加了一个n-1是为了防止出现负数。加完一轮n-1和d1长度一样
      const d1 = r + c;
      const d2 = r - c + n - 1; // Adjust to avoid negative indices
      if (!onPath[c] && !diag1[d1] && !diag2[d2]) {
        queens[r] = c;
        onPath[c] = diag1[d1] = diag2[d2] = true;
        dfs(r + 1);
        onPath[c] = diag1[d1] = diag2[d2] = false;
      }
    }
  };

  dfs(0);
  return ans;
};
// 第三种：组合型
// combination 77 39 40 + parentheses(22)
// 77. Combination
var combine = function (n, k) {
  const ans = [];
  const path = [];

  const dfs = (i) => {
    const d = k - path.length; // remaining length to choose
    if (d === 0) {
      ans.push([...path]);
      return;
    }
    // 组合不像全排列，不需要onPath去记录是否在path上
    // 因为他for loop是从j=i开始的，根本选不到前头去
    // 而permutation的for loop是从j=0开始的
    for (let j = i; j >= d; j--) {
      path.push(j);
      dfs(j - 1);
      path.pop();
    }
  };
  dfs(n);
  return ans;
};

// 39.combination sum
var combinationSum = function (candidates, target) {
  candidates.sort((a, b) => a - b);

  const ans = [];
  const path = [];

  const dfs = (i, left) => {
    if (left === 0) {
      ans.push([...path]);
      return;
    }
    if (left < candidates[i]) return;
    for (let j = i; j < candidates.length; j++) {
      path.push(candidates[j]);
      dfs(j, left - candidates[j]);
      path.pop();
    }
  };

  dfs(0, target);
  return ans;
};